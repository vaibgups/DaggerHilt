// Generated by Dagger (https://dagger.dev).
package com.example.daggerhilt.demo;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Car_Factory implements Factory<Car> {
  private final Provider<Engine> engineProvider;

  private final Provider<Wheel> wheelProvider;

  public Car_Factory(Provider<Engine> engineProvider, Provider<Wheel> wheelProvider) {
    this.engineProvider = engineProvider;
    this.wheelProvider = wheelProvider;
  }

  @Override
  public Car get() {
    return newInstance(engineProvider.get(), wheelProvider.get());
  }

  public static Car_Factory create(Provider<Engine> engineProvider, Provider<Wheel> wheelProvider) {
    return new Car_Factory(engineProvider, wheelProvider);
  }

  public static Car newInstance(Engine engine, Wheel wheel) {
    return new Car(engine, wheel);
  }
}
