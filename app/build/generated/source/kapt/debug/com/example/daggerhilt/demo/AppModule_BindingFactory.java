// Generated by Dagger (https://dagger.dev).
package com.example.daggerhilt.demo;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_BindingFactory implements Factory<One> {
  private final AppModule module;

  private final Provider<String> nameProvider;

  public AppModule_BindingFactory(AppModule module, Provider<String> nameProvider) {
    this.module = module;
    this.nameProvider = nameProvider;
  }

  @Override
  public One get() {
    return binding(module, nameProvider.get());
  }

  public static AppModule_BindingFactory create(AppModule module, Provider<String> nameProvider) {
    return new AppModule_BindingFactory(module, nameProvider);
  }

  public static One binding(AppModule instance, String name) {
    return Preconditions.checkNotNullFromProvides(instance.binding(name));
  }
}
